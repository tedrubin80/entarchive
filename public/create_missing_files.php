<?php
/**
 * Missing Dashboard Files Generator
 * File: create_missing_files.php
 * Generates basic versions of missing dashboard pages
 */
error_reporting(E_ALL);
ini_set('display_errors', 1);

echo "<h1>üîß Missing Dashboard Files Generator</h1>";
echo "<style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    .created { color: green; font-weight: bold; }
    .exists { color: blue; }
    .error { color: red; }
    .section { background: #f8f9fa; padding: 15px; margin: 15px 0; border-radius: 5px; }
    code { background: #e9ecef; padding: 2px 6px; border-radius: 3px; }
    pre { background: #f8f9fa; padding: 10px; border-radius: 5px; overflow-x: auto; }
</style>";

function createDirectory($dir) {
    if (!is_dir($dir)) {
        if (mkdir($dir, 0755, true)) {
            echo "<span class='created'>‚úÖ Created directory: $dir</span><br>";
            return true;
        } else {
            echo "<span class='error'>‚ùå Failed to create directory: $dir</span><br>";
            return false;
        }
    } else {
        echo "<span class='exists'>üìÅ Directory exists: $dir</span><br>";
        return true;
    }
}

function createFile($filename, $content) {
    if (file_exists($filename)) {
        echo "<span class='exists'>üìÑ File exists: $filename</span><br>";
        return false;
    }
    
    $dir = dirname($filename);
    if (!is_dir($dir)) {
        createDirectory($dir);
    }
    
    if (file_put_contents($filename, $content) !== false) {
        echo "<span class='created'>‚úÖ Created file: $filename</span><br>";
        return true;
    } else {
        echo "<span class='error'>‚ùå Failed to create file: $filename</span><br>";
        return false;
    }
}

// Create required directories
echo "<div class='section'>";
echo "<h2>üìÇ Creating Required Directories</h2>";

$directories = [
    'public',
    'api',
    'config',
    'includes',
    'cache',
    'logs',
    'uploads',
    'uploads/posters',
    'uploads/thumbnails',
    'db/backups'
];

foreach ($directories as $dir) {
    createDirectory($dir);
}
echo "</div>";

// Create basic config.php if missing
echo "<div class='section'>";
echo "<h2>‚öôÔ∏è Creating Configuration Files</h2>";

$configContent = '<?php
/**
 * Basic Configuration File
 * File: config.php
 * Generated by dashboard setup
 */

// Database Configuration
define("DB_HOST", "localhost");
define("DB_NAME", "media_collection");
define("DB_USER", "root");
define("DB_PASS", "");

// Application Settings
define("APP_NAME", "Personal Media Collection");
define("APP_VERSION", "1.0.0");
define("DEBUG_MODE", true);

// Security Settings
define("SESSION_TIMEOUT", 3600); // 1 hour
define("MAX_LOGIN_ATTEMPTS", 5);

// File Upload Settings
define("MAX_FILE_SIZE", 10 * 1024 * 1024); // 10MB
define("UPLOAD_DIR", "uploads/");

// API Keys (optional)
define("TMDB_API_KEY", "");
define("GOOGLE_BOOKS_API_KEY", "");

// Set timezone
date_default_timezone_set("America/New_York");

// Start session configuration
ini_set("session.cookie_httponly", 1);
ini_set("session.use_only_cookies", 1);
ini_set("session.cookie_secure", 0); // Set to 1 for HTTPS
?>';

createFile('config.php', $configContent);
echo "</div>";

// Create missing user pages
echo "<div class='section'>";
echo "<h2>üë§ Creating Missing User Pages</h2>";

$userPages = [
    'user_collection.php' => [
        'title' => 'My Collection',
        'icon' => 'üìö',
        'description' => 'Browse and manage your media collection',
        'features' => ['Filter by category', 'Sort options', 'Grid/list view', 'Quick actions']
    ],
    'user_wishlist.php' => [
        'title' => 'Wishlist',
        'icon' => '‚≠ê',
        'description' => 'Items you want to add to your collection',
        'features' => ['Add to wishlist', 'Priority levels', 'Price tracking', 'Purchase links']
    ],
    'user_search.php' => [
        'title' => 'Search',
        'icon' => 'üîç',
        'description' => 'Search your collection and external databases',
        'features' => ['Advanced filters', 'External API search', 'Save searches', 'Export results']
    ],
    'user_stats.php' => [
        'title' => 'Statistics',
        'icon' => 'üìä',
        'description' => 'View collection statistics and analytics',
        'features' => ['Collection value', 'Genre breakdown', 'Growth charts', 'Top items']
    ],
    'user_export.php' => [
        'title' => 'Export Data',
        'icon' => 'üíæ',
        'description' => 'Export your collection data',
        'features' => ['CSV export', 'PDF reports', 'Backup creation', 'Custom formats']
    ],
    'user_security_settings.php' => [
        'title' => '2FA Security',
        'icon' => 'üîê',
        'description' => 'Manage your security settings',
        'features' => ['Two-factor auth', 'Backup codes', 'Device management', 'Login history']
    ]
];

foreach ($userPages as $filename => $pageData) {
    $userPageContent = generateUserPageTemplate($filename, $pageData);
    createFile("public/$filename", $userPageContent);
}
echo "</div>";

// Create API files
echo "<div class='section'>";
echo "<h2>üîå Creating API Files</h2>";

$apiFiles = [
    'api_router.php' => generateAPIRouter(),
    'api_collection.php' => generateCollectionAPI(),
    'api_search.php' => generateSearchAPI()
];

foreach ($apiFiles as $filename => $content) {
    createFile("api/$filename", $content);
}
echo "</div>";

// Create include files
echo "<div class='section'>";
echo "<h2>üì¶ Creating Include Files</h2>";

$includeFiles = [
    'inc_functions.php' => generateCoreFunctions(),
    'inc_database.php' => generateDatabaseFunctions(),
    'inc_auth.php' => generateAuthFunctions()
];

foreach ($includeFiles as $filename => $content) {
    createFile("includes/$filename", $content);
}
echo "</div>";

// Summary
echo "<div class='section'>";
echo "<h2>‚úÖ Setup Complete!</h2>";
echo "<p><strong>Next steps:</strong></p>";
echo "<ol>";
echo "<li>Update <code>config.php</code> with your database credentials</li>";
echo "<li>Create your database and run the schema</li>";
echo "<li>Test login at <a href='public/user_login.php' target='_blank'>user_login.php</a></li>";
echo "<li>Check dashboard at <a href='public/enhanced_media_dashboard.php' target='_blank'>enhanced_media_dashboard.php</a></li>";
echo "<li>Run the diagnostic: <a href='dashboard_diagnostic.php' target='_blank'>dashboard_diagnostic.php</a></li>";
echo "</ol>";
echo "</div>";

// Helper functions for generating templates
function generateUserPageTemplate($filename, $pageData) {
    $pageName = str_replace(['user_', '.php'], '', $filename);
    $title = $pageData['title'];
    $icon = $pageData['icon'];
    $description = $pageData['description'];
    $features = implode('", "', $pageData['features']);
    
    return '<?php
/**
 * ' . $title . ' Page
 * File: public/' . $filename . '
 * Generated by dashboard setup
 */
error_reporting(E_ALL);
ini_set("display_errors", 1);

session_start();

// Check authentication
if (!isset($_SESSION["admin_logged_in"]) || !$_SESSION["admin_logged_in"]) {
    header("Location: user_login.php");
    exit;
}

$currentUser = $_SESSION["admin_user"] ?? "User";
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>' . $title . ' - Media Collection</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            margin: 0;
            padding: 0;
            background: #f5f7fa;
            line-height: 1.6;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem 0;
            text-align: center;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        .page-header {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            text-align: center;
        }
        .page-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
        }
        .page-title {
            font-size: 2.5rem;
            color: #333;
            margin-bottom: 0.5rem;
        }
        .page-description {
            color: #666;
            font-size: 1.1rem;
            margin-bottom: 2rem;
        }
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 2rem;
        }
        .feature-card {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            text-align: center;
        }
        .feature-icon {
            font-size: 2rem;
            margin-bottom: 1rem;
        }
        .coming-soon {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 10px;
            padding: 2rem;
            text-align: center;
            margin: 2rem 0;
        }
        .nav-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-top: 2rem;
        }
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        .btn-primary {
            background: #667eea;
            color: white;
        }
        .btn-primary:hover {
            background: #5a6fd8;
        }
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        .btn-secondary:hover {
            background: #545b62;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>' . $icon . ' ' . $title . '</h1>
        <p>Personal Media Management System</p>
        <p>Welcome, <?php echo htmlspecialchars($currentUser); ?>!</p>
    </div>

    <div class="container">
        <div class="page-header">
            <div class="page-icon">' . $icon . '</div>
            <h2 class="page-title">' . $title . '</h2>
            <p class="page-description">' . $description . '</p>
            
            <div class="coming-soon">
                <h3>üöß Under Development</h3>
                <p>This page is currently being built. Check back soon for full functionality!</p>
            </div>
        </div>

        <div class="features-grid">
            <?php
            $features = ["' . $features . '"];
            foreach ($features as $feature) {
                echo "<div class=\"feature-card\">";
                echo "<div class=\"feature-icon\">‚ú®</div>";
                echo "<h4>$feature</h4>";
                echo "<p>Coming soon...</p>";
                echo "</div>";
            }
            ?>
        </div>

        <div class="nav-buttons">
            <a href="enhanced_media_dashboard.php" class="btn btn-primary">üè† Back to Dashboard</a>
            <a href="user_add_item.php" class="btn btn-secondary">‚ûï Add Item</a>
        </div>
    </div>
</body>
</html>';
}

function generateAPIRouter() {
    return '<?php
/**
 * API Router
 * File: api/api_router.php
 * Routes API requests to appropriate handlers
 */
header("Content-Type: application/json");
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE");
header("Access-Control-Allow-Headers: Content-Type");

// Include configuration
require_once "../config.php";

// Get request method and endpoint
$method = $_SERVER["REQUEST_METHOD"];
$endpoint = $_GET["endpoint"] ?? "";

// Basic authentication check for API
session_start();
if (!isset($_SESSION["admin_logged_in"]) || !$_SESSION["admin_logged_in"]) {
    http_response_code(401);
    echo json_encode(["error" => "Authentication required"]);
    exit;
}

// Route requests
switch ($endpoint) {
    case "collection":
        include "api_collection.php";
        break;
        
    case "search":
        include "api_search.php";
        break;
        
    case "barcode":
        include "api_barcode.php";
        break;
        
    default:
        http_response_code(404);
        echo json_encode(["error" => "Endpoint not found"]);
        break;
}
?>';
}

function generateCollectionAPI() {
    return '<?php
/**
 * Collection API
 * File: api/api_collection.php
 * Handles collection-related API requests
 */

class CollectionAPI {
    private $pdo;
    
    public function __construct() {
        try {
            $dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME;
            $this->pdo = new PDO($dsn, DB_USER, DB_PASS, [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION
            ]);
        } catch (PDOException $e) {
            $this->sendError("Database connection failed");
        }
    }
    
    public function handleRequest() {
        $method = $_SERVER["REQUEST_METHOD"];
        
        switch ($method) {
            case "GET":
                $this->getCollection();
                break;
            case "POST":
                $this->addItem();
                break;
            case "PUT":
                $this->updateItem();
                break;
            case "DELETE":
                $this->deleteItem();
                break;
            default:
                $this->sendError("Method not allowed", 405);
        }
    }
    
    private function getCollection() {
        try {
            $limit = $_GET["limit"] ?? 50;
            $offset = $_GET["offset"] ?? 0;
            
            $stmt = $this->pdo->prepare("
                SELECT * FROM collection 
                ORDER BY created_at DESC 
                LIMIT ? OFFSET ?
            ");
            $stmt->execute([$limit, $offset]);
            $items = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            echo json_encode([
                "success" => true,
                "data" => $items,
                "count" => count($items)
            ]);
        } catch (Exception $e) {
            $this->sendError("Failed to retrieve collection");
        }
    }
    
    private function addItem() {
        // Implementation for adding items
        $this->sendError("Add item not yet implemented");
    }
    
    private function updateItem() {
        // Implementation for updating items
        $this->sendError("Update item not yet implemented");
    }
    
    private function deleteItem() {
        // Implementation for deleting items
        $this->sendError("Delete item not yet implemented");
    }
    
    private function sendError($message, $code = 400) {
        http_response_code($code);
        echo json_encode([
            "success" => false,
            "error" => $message
        ]);
    }
}

$api = new CollectionAPI();
$api->handleRequest();
?>';
}

function generateSearchAPI() {
    return '<?php
/**
 * Search API
 * File: api/api_search.php
 * Handles search requests
 */

class SearchAPI {
    private $pdo;
    
    public function __construct() {
        try {
            $dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME;
            $this->pdo = new PDO($dsn, DB_USER, DB_PASS, [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION
            ]);
        } catch (PDOException $e) {
            $this->sendError("Database connection failed");
        }
    }
    
    public function handleRequest() {
        if ($_SERVER["REQUEST_METHOD"] !== "GET") {
            $this->sendError("Only GET requests allowed", 405);
            return;
        }
        
        $query = $_GET["q"] ?? "";
        $category = $_GET["category"] ?? "";
        
        if (empty($query)) {
            $this->sendError("Search query required");
            return;
        }
        
        $this->search($query, $category);
    }
    
    private function search($query, $category = "") {
        try {
            $sql = "SELECT * FROM collection WHERE title LIKE ? OR description LIKE ?";
            $params = ["%$query%", "%$query%"];
            
            if (!empty($category)) {
                $sql .= " AND category = ?";
                $params[] = $category;
            }
            
            $sql .= " ORDER BY title ASC LIMIT 100";
            
            $stmt = $this->pdo->prepare($sql);
            $stmt->execute($params);
            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            echo json_encode([
                "success" => true,
                "query" => $query,
                "category" => $category,
                "results" => $results,
                "count" => count($results)
            ]);
        } catch (Exception $e) {
            $this->sendError("Search failed");
        }
    }
    
    private function sendError($message, $code = 400) {
        http_response_code($code);
        echo json_encode([
            "success" => false,
            "error" => $message
        ]);
    }
}

$api = new SearchAPI();
$api->handleRequest();
?>';
}

function generateCoreFunctions() {
    return '<?php
/**
 * Core Functions
 * File: includes/inc_functions.php
 * Common utility functions
 */

/**
 * Sanitize input data
 */
function sanitizeInput($data) {
    $data = trim($data);
    $data = stripslashes($data);
    $data = htmlspecialchars($data);
    return $data;
}

/**
 * Generate secure random string
 */
function generateRandomString($length = 32) {
    return bin2hex(random_bytes($length / 2));
}

/**
 * Format file size
 */
function formatFileSize($bytes) {
    $units = ["B", "KB", "MB", "GB", "TB"];
    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);
    $bytes /= pow(1024, $pow);
    return round($bytes, 2) . " " . $units[$pow];
}

/**
 * Log message to file
 */
function logMessage($message, $level = "INFO") {
    $logFile = __DIR__ . "/../logs/application.log";
    $timestamp = date("Y-m-d H:i:s");
    $logEntry = "[$timestamp] [$level] $message" . PHP_EOL;
    
    if (!is_dir(dirname($logFile))) {
        mkdir(dirname($logFile), 0755, true);
    }
    
    file_put_contents($logFile, $logEntry, FILE_APPEND | LOCK_EX);
}

/**
 * Check if user is authenticated
 */
function isAuthenticated() {
    return isset($_SESSION["admin_logged_in"]) && $_SESSION["admin_logged_in"];
}

/**
 * Redirect with message
 */
function redirectWithMessage($url, $message, $type = "info") {
    $_SESSION["flash_message"] = $message;
    $_SESSION["flash_type"] = $type;
    header("Location: $url");
    exit;
}

/**
 * Display flash message
 */
function displayFlashMessage() {
    if (isset($_SESSION["flash_message"])) {
        $message = $_SESSION["flash_message"];
        $type = $_SESSION["flash_type"] ?? "info";
        
        echo "<div class=\"alert alert-$type\">$message</div>";
        
        unset($_SESSION["flash_message"]);
        unset($_SESSION["flash_type"]);
    }
}
?>';
}

function generateDatabaseFunctions() {
    return '<?php
/**
 * Database Functions
 * File: includes/inc_database.php
 * Database connection and common queries
 */

/**
 * Get database connection
 */
function getDBConnection() {
    static $pdo = null;
    
    if ($pdo === null) {
        try {
            $dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=utf8mb4";
            $pdo = new PDO($dsn, DB_USER, DB_PASS, [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                PDO::ATTR_EMULATE_PREPARES => false
            ]);
        } catch (PDOException $e) {
            logMessage("Database connection failed: " . $e->getMessage(), "ERROR");
            throw new Exception("Database connection failed");
        }
    }
    
    return $pdo;
}

/**
 * Execute query with parameters
 */
function executeQuery($sql, $params = []) {
    try {
        $pdo = getDBConnection();
        $stmt = $pdo->prepare($sql);
        $stmt->execute($params);
        return $stmt;
    } catch (PDOException $e) {
        logMessage("Query failed: " . $e->getMessage(), "ERROR");
        throw new Exception("Query execution failed");
    }
}

/**
 * Get single row
 */
function fetchRow($sql, $params = []) {
    $stmt = executeQuery($sql, $params);
    return $stmt->fetch();
}

/**
 * Get multiple rows
 */
function fetchRows($sql, $params = []) {
    $stmt = executeQuery($sql, $params);
    return $stmt->fetchAll();
}

/**
 * Get collection statistics
 */
function getCollectionStats() {
    $stats = [
        "total_items" => 0,
        "total_value" => 0,
        "categories" => [],
        "recent_items" => 0
    ];
    
    try {
        // Total items
        $result = fetchRow("SELECT COUNT(*) as count FROM collection");
        $stats["total_items"] = $result["count"] ?? 0;
        
        // Total value
        $result = fetchRow("SELECT SUM(purchase_price) as total FROM collection WHERE purchase_price IS NOT NULL");
        $stats["total_value"] = $result["total"] ?? 0;
        
        // Categories
        $categories = fetchRows("SELECT category, COUNT(*) as count FROM collection GROUP BY category");
        $stats["categories"] = $categories;
        
        // Recent items (last 30 days)
        $result = fetchRow("SELECT COUNT(*) as count FROM collection WHERE created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)");
        $stats["recent_items"] = $result["count"] ?? 0;
        
    } catch (Exception $e) {
        logMessage("Failed to get collection stats: " . $e->getMessage(), "ERROR");
    }
    
    return $stats;
}
?>';
}

function generateAuthFunctions() {
    return '<?php
/**
 * Authentication Functions
 * File: includes/inc_auth.php
 * User authentication and session management
 */

/**
 * Login user
 */
function loginUser($username, $password) {
    // Simple authentication for development
    // Replace with proper database authentication in production
    if ($username === "admin" && $password === "password123") {
        $_SESSION["admin_logged_in"] = true;
        $_SESSION["admin_user"] = $username;
        $_SESSION["admin_id"] = 1;
        $_SESSION["admin_role"] = "admin";
        $_SESSION["login_time"] = time();
        
        logMessage("User logged in: $username", "INFO");
        return true;
    }
    
    logMessage("Failed login attempt: $username", "WARNING");
    return false;
}

/**
 * Logout user
 */
function logoutUser() {
    $username = $_SESSION["admin_user"] ?? "unknown";
    logMessage("User logged out: $username", "INFO");
    
    session_destroy();
    session_start();
}

/**
 * Check if session is valid
 */
function isValidSession() {
    if (!isset($_SESSION["admin_logged_in"]) || !$_SESSION["admin_logged_in"]) {
        return false;
    }
    
    // Check session timeout
    $loginTime = $_SESSION["login_time"] ?? 0;
    $sessionTimeout = defined("SESSION_TIMEOUT") ? SESSION_TIMEOUT : 3600;
    
    if (time() - $loginTime > $sessionTimeout) {
        logoutUser();
        return false;
    }
    
    return true;
}

/**
 * Require authentication
 */
function requireAuth() {
    if (!isValidSession()) {
        header("Location: user_login.php");
        exit;
    }
}

/**
 * Generate CSRF token
 */
function generateCSRFToken() {
    if (!isset($_SESSION["csrf_token"])) {
        $_SESSION["csrf_token"] = generateRandomString(32);
    }
    return $_SESSION["csrf_token"];
}

/**
 * Verify CSRF token
 */
function verifyCSRFToken($token) {
    return isset($_SESSION["csrf_token"]) && hash_equals($_SESSION["csrf_token"], $token);
}
?>';
}

echo "<script>console.log('Missing files generator completed!');</script>";
?>